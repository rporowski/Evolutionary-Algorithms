import random
import matplotlib.pyplot as plt
import numpy as np

def generate_cities(n, seed=42):
    random.seed(seed)
    return [(random.uniform(0, 100), random.uniform(0, 100)) for _ in range(n)]

def calculate_distance(route, cities):
    return sum(np.linalg.norm(np.array(cities[route[i]]) - np.array(cities[route[i + 1]])) for i in range(len(route) - 1))

def swap_2opt(route, i, k):
    return route[:i] + route[i:k + 1][::-1] + route[k + 1:]

def local_optimization(route, cities):
    best_route = route
    best_distance = calculate_distance(route, cities)
    improved = True
    while improved:
        improved = False
        for i in range(1, len(route) - 2):
            for k in range(i + 1, len(route) - 1):
                new_route = swap_2opt(best_route, i, k)
                new_distance = calculate_distance(new_route, cities)
                if new_distance < best_distance:
                    best_route, best_distance = new_route, new_distance
                    improved = True
    return best_route

# Main
n_cities = 10
cities = generate_cities(n_cities)
initial_route = list(range(n_cities)) + [0]
random.shuffle(initial_route[:-1])

initial_distance = calculate_distance(initial_route, cities)
optimized_route = local_optimization(initial_route, cities)
optimized_distance = calculate_distance(optimized_route, cities)

print(f"Initial Distance: {initial_distance}")
print(f"Optimized Distance: {optimized_distance}")

# Visualization
def plot_route(route, cities, title):
    x = [cities[i][0] for i in route]
    y = [cities[i][1] for i in route]
    plt.figure(figsize=(8, 6))
    plt.plot(x, y, '-o')
    plt.title(title)
    plt.xlabel("X Coordinate")
    plt.ylabel("Y Coordinate")
    plt.show()

plot_route(initial_route, cities, "Initial Route")
plot_route(optimized_route, cities, "Optimized Route")
